(define (make-entry key value left right)
  (list key value left right))

(define (key entry) (car entry))

(define (value entry) (cadr entry))

(define (left-branch entry) (caddr entry))

(define (right-branch entry) (cadddr entry))

(define (lookup given-key set-of-records)
  (define (pass-kv entry)
    (cons (key entry) (value entry)))
  (newline)
  (newline)
  (display "at record: ")
  (display set-of-records)
  (cond ((null? set-of-records) false)
        ((equal? given-key (key set-of-records))
         (pass-kv set-of-records))
        ((< given-key (key set-of-records))
         (lookup given-key (left-branch set-of-records)))
        ((> given-key (key set-of-records))
         (lookup given-key (right-branch set-of-records)))))

; makes a new-entry to be loaded in a list to kv-list->tree 
(define (new-entry key value) (cons key value))

(define (new-key new-e) (car new-e))

(define (new-value new-e) (cdr new-e))

(define (kv-list->tree elements)
  (car (partial-tree elements (length elements))))

(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                  (right-result (partial-tree (cdr non-left-elts)
                                              right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elts (cdr right-result)))
                (cons (make-entry (new-key this-entry)
                                  (new-value this-entry)
                                  left-tree
                                  right-tree)
                      remaining-elts))))))))

(define test-db (list (new-entry 1 'anne)
                      ;(new-entry 2 'bob)
                      (new-entry 3 'carla)
                      (new-entry 4 'dana)
                      (new-entry 5 'ellie)
                      (new-entry 6 'fran)
                      (new-entry 7 'georgina)
                      (new-entry 8 'harriet)
                      (new-entry 9 'iggy)
                      (new-entry 10 'jasmine)
                      (new-entry 11 'kylie)
                      (new-entry 12 'laura)
                      (new-entry 13 'mika)
                      (new-entry 14 'nano)
                      (new-entry 15 'olga)
                      (new-entry 16 'pat)
                      (new-entry 17 'quince)
                      (new-entry 18 'roberta)
                      (new-entry 19 'sally)
                      (new-entry 20 'ted)
                      (new-entry 21 'ulyanov)
                      (new-entry 22 'vic)
                      (new-entry 23 'wally)
                      (new-entry 24 'xenia)
                      (new-entry 25 'yoho)
                      (new-entry 26 'zelda)))

(define db (kv-list->tree test-db))
