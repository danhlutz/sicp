(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (sub-interval x y)
  (make-interval (- (lower-bound x) (lower-bound y))
                 (- (upper-bound x) (upper-bound y))))


(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (div-interval x y)
  (mul-interval x
                (make-interval (/ 1.0 (upper-bound y))
                               (/ 1.0 (lower-bound y)))))

(define (make-interval a b) (cons a b))

(define (lower-bound interval)
  (car interval))

(define (upper-bound interval)
  (cdr interval))

(define (width interval)
  (/ (- (upper-bound interval)
        (lower-bound interval))
     2.0))

; example

(define a (make-interval 2 6))
(define b (make-interval 1 17))
(define c (make-interval 3 39))

(newline)
(display "Interval a: ")
(display a)
(newline)
(display "Interval b: ")
(display b)
(newline)
(display "Interval c: ")
(display c)
(newline)
(display "Width of a + b: ")
(display (width (add-interval a b)))
(newline)
(display "Width of a + width of b: ")
(display (+ (width a) (width b)))
(newline)
(display "Width of b + c: ")
(display (width (add-interval b c)))
(newline)
(display "Width of b + width of c: ")
(display (+ (width b) (width c)))
(newline)
(display "Width of b * a: ")
(display (width (mul-interval b a)))
(newline)
(display "Width of b * width of a: ")
(display (* (width b) (width a)))
(newline)
(display "Width of c / a: ")
(display (width (div-interval c a)))
(newline)
(display "Width of c / width of a: ")
(display (/ (width c) (width a)))
