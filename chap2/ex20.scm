(define (same-parity . w)
  (let ((first (car w)))
    (define (check-parity? b)
      (= (remainder first 2) (remainder b 2)))
    (define (iter first items)
      (cond ((= (length items) 0) (list))
            ((check-parity? (car items))
             (cons (car items) (iter first (cdr items))))
            (else (iter first (cdr items)))))
    (iter first w)))
