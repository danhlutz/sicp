(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty-queue-internal?) (null? front-ptr))
    (define (front-queue-internal)
      (if (empty-queue-internal?)
          (error "FRONT called with empty queue" front-ptr)
          (car front-ptr)))
    (define (insert-queue-internal! item)
      (let ((new-pair (cons item '())))
        (if (empty-queue-internal?)
            (begin (set! front-ptr new-pair)
                   (set! rear-ptr new-pair)
                   front-ptr)
            (begin (set-cdr! rear-ptr new-pair)
                   (set! rear-ptr new-pair)
                   front-ptr))))
    (define (delete-internal!)
      (if (empty-queue-internal?)
          (error "DELETE called with emtpy queue!" front-ptr)
          (begin (set! front-ptr (cdr front-ptr))
                 front-ptr)))
    (define (print-internal)
      (if (empty-queue-internal?)
          "empty-queue"
          (begin (display "queue: ")
                 (display front-ptr))))
    (define (dispatch m)
      (cond ((eq? m 'empty-queue?) empty-queue-internal?)
            ((eq? m 'front-queue) front-queue-internal)
            ((eq? m 'insert-queue!) insert-queue-internal!)
            ((eq? m 'delete-queue!) delete-internal!)
            ((eq? m 'print) print-internal)
            (else (error "Msg not defined -- MAKE-QUEUE" m))))
    dispatch))

(define (empty-queue? queue) ((queue 'empty-queue?)))

(define (front-queue queue) ((queue 'front-queue)))

(define (insert-queue! queue item) ((queue 'insert-queue!) item))

(define (delete-queue! queue) ((queue 'delete-queue!)))

(define (print-queue queue) ((queue 'print)))
